{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAqCeA,EAlCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAkBrC,OACI,sBAAMC,SAVW,SAACC,GAElBA,EAAEC,iBACCJ,EAAWK,OAAS,IACnBP,GAAc,SAAAQ,GAAI,OAAKN,GAAL,mBAAoBM,OACtCL,EAAc,MAKlB,SACI,uBACIM,KAAK,OACLC,MAAOR,EAEPS,SApBc,SAACN,GAEvBF,EAAcE,EAAEO,OAAOF,a,+BCOhBG,EAhBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAUH,GADpD,+DAEOI,MAAMF,GAFb,cAENG,EAFM,gBAGSA,EAAKC,OAHd,uBAGLC,EAHK,EAGLA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT9B,kBAaLM,GAbK,4CAAH,sDCsBEO,EAnBM,SAACf,GAAc,IAAD,EACLb,mBAAS,CAC/BoB,KAAM,GACNS,SAAS,IAHkB,mBACxBC,EADwB,KACjBC,EADiB,KAgB/B,OARAC,qBAAU,WACNpB,EAAQC,GACHoB,MAAK,SAAAP,GAAM,OAAIK,EAAS,CACrBX,KAAMM,EACNG,SAAS,SAEnB,CAAChB,IAEIiB,GCPII,EAVK,SAAC,GAAkB,IAAjBT,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEzB,OACI,sBAAKoB,UAAU,yCAAf,UACI,qBAAKC,IAAKrB,EAAKsB,IAAKZ,IACpB,4BAAIA,QCoBDa,EAvBC,SAAC,GAAgB,IAAfzB,EAAc,EAAdA,SAAc,EAEIe,EAAaf,GAAhCa,EAFe,EAErBN,KAAcS,EAFO,EAEPA,QAErB,OACQ,qCACA,oBAAIM,UAAU,oCAAd,SAAmDtB,IAClDgB,GAAW,mBAAGM,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAEQT,EAAOJ,KAAI,SAAAC,GAAG,OACd,cAAC,EAAD,eAGQA,GAFCA,EAAIC,aCoBlBe,EAhCM,WAAM,MAGavC,mBAAS,CAAC,cAHvB,mBAGhBwC,EAHgB,KAGJzC,EAHI,KAYvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAGIyC,EAAWlB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCrB7B4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.048ae655.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        //Basicamente al mas minimo cambio renderiza todo\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        //Evita que el navegador use el envio submit antiguo\r\n        e.preventDefault();\r\n        if(inputValue.length > 2){\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                //Esto es para cambiar el estado y no dejar que se quede estatico el input\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;","const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=4ITmTlRtTjwAZTC6iBepNgzjZIakVEDD`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n};\r\n\r\nexport default getGifs;","import { useEffect, useState } from \"react\";\r\nimport getGifs from \"../helpers/getGifs\";\r\n\r\nconst useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //El useEffect hace que el código se ejecute una sola vez\r\n    //sabiendo que cada que se actualiza el estado se prerenderiza todo\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(images => setState({\r\n                data: images,\r\n                loading: false\r\n            }));\r\n    },[category]); //Esto hace que se vuelva a ejecutar el código del effect*/\r\n\r\n    return state;\r\n};\r\n\r\nexport default useFetchGifs;","import React from 'react';\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n            <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        //Al hacer esto se envia cada una de las propiedades de img como una propiedad independiente\r\n                        {...img} \r\n                    />\r\n                ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default GifGrid;","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    /*const handleAdd = () => {\r\n        //Recuerda, el estado no se muta, simplemente se suma sus propiedades con su agregado nuevo\r\n        //al cambiar el estado se renderiza el componente de nuevo\r\n        //setCategories(['HunterXHunter', ...categories]);\r\n        setCategories(cats => [...cats, 'HunterXHunter']);\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                //React necesita que para cada elemento se identifique su key\r\n                categories.map(category =>(\r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category}\r\n                    />))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}